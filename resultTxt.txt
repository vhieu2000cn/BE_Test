package com.example.test

import android.animation.AnimatorInflater
import android.animation.ValueAnimator
import android.content.Context
import android.graphics.*
import android.util.AttributeSet
import android.view.View
import androidx.core.content.ContextCompat

class LoadingButton @JvmOverloads constructor(
    context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0
) : View(context, attrs, defStyleAttr) {

    private var bgColor: Int = ContextCompat.getColor(context, R.color.purple_200)
    private var textColor: Int = ContextCompat.getColor(context, R.color.white)

    @Volatile
    private var progress: Double = 0.0

    private var valueAnimator: ValueAnimator

    private var buttonState: ButtonState = ButtonState.Complete

    private val updateListener = ValueAnimator.AnimatorUpdateListener {
        progress = (it.animatedValue as Float).toDouble()
        if (progress == 100.toDouble()){
            it.cancel()
            buttonState = ButtonState.Complete
        }
        invalidate()
        requestLayout()
    }

    init {
        isClickable = true

        valueAnimator = AnimatorInflater.loadAnimator(
            context, R.animator.loading_animation
        ) as ValueAnimator
        valueAnimator.addUpdateListener(updateListener)
    }

    private val paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.FILL_AND_STROKE
        textAlign = Paint.Align.CENTER
        textSize = 60.0f
        typeface = Typeface.create("", Typeface.BOLD)
    }

    override fun performClick(): Boolean {
        super.performClick()
        if (buttonState == ButtonState.Complete) buttonState = ButtonState.Loading
        valueAnimator.start()

        return true
    }

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)
        paint.strokeWidth = 0f
        paint.color = bgColor
        canvas.drawRect(0f, 0f, width.toFloat(), height.toFloat(), paint)
        if (buttonState == ButtonState.Loading) {
            paint.color = Color.BLUE
            canvas.drawRect(
                0f, 0f,
                (width * (progress / 100)).toFloat(), height.toFloat(), paint
            )
            paint.color = Color.YELLOW
            canvas.drawArc(
                500f,
                0f,
                height.toFloat()+500f,
                height.toFloat(),
                0f,
                (360 * (progress / 100)).toFloat(),
                true,
                paint
            )
        }
        val buttonText =
            if (buttonState == ButtonState.Loading)
                resources.getString(R.string.loading)
            else resources.getString(R.string.download)

        paint.color = textColor
        canvas.drawText(
            buttonText, (width / 2).toFloat(), ((height + 30) / 2).toFloat(),
            paint
        )
    }
}

enum class ButtonState {
    Loading, Complete
}
// this is updated



